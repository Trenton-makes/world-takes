import csv
import os
from PIL import Image, ImageFont, ImageDraw

def createFolder(directory):
    try:
        if not os.path.exists(directory):
            os.makedirs(directory)
    except OSError:
        print ('Error: Creating directory. ' +  directory)

filename = input('What is the name of the csv file? (excluding the ".csv") ')

createFolder(f'./{filename}/')

print('Creating quotes...')

with open(filename +'.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    line_count = 0
    quotes = []
    for row in csv_reader:
        quotes.append(row)
        line_count += 1
        #if line_count > 10:
            #break
            
quote_nr = 1
error_nr = 0

for [quote] in quotes:
    
    canvas = Image.open("4HWW.png")

    font_size = 80
    font = ImageFont.truetype('Georgia-Italic.ttf',font_size)
    
    quote_words = quote.rsplit()

    length = -22 # because a space (" ") is 22 pixels long
    wordcount = 0
    break_lines = []

    for word in quote_words:
        w,h = font.getsize(word+' ')
        length += w
        if length >= 1000:
            break_lines.append(wordcount)
            length = w-22
        else:
            pass
        wordcount += 1

    if (len(break_lines) + 1) > 6:

        font_size = 60
        font = ImageFont.truetype('Georgia-Italic.ttf',font_size)

        quote_words = quote.rsplit()

        length = -22 # because a space is 22 pixels long
        wordcount = 0
        break_lines = []

        for word in quote_words:
            w,h = font.getsize(word+' ')
            length += w
            if length >= 1000:
                break_lines.append(wordcount)
                length = w-22
            else:
                pass
            wordcount += 1

        if (len(break_lines) + 1) > 8:

            font_size = 40
            font = ImageFont.truetype('Georgia-Italic.ttf',font_size)

            quote_words = quote.rsplit()

            length = -22 # because a space is 22 pixels long
            wordcount = 0
            break_lines = []

            for word in quote_words:
                w,h = font.getsize(word+' ')
                length += w
                if length >= 1000:
                    break_lines.append(wordcount)
                    length = w-22
                else:
                    pass
                wordcount += 1

            if (len(break_lines) + 1) > 13:

                font_size = 30
                font = ImageFont.truetype('Georgia-Italic.ttf',font_size)

                quote_words = quote.rsplit()

                length = -22 # because a space is 22 pixels long
                wordcount = 0
                break_lines = []

                for word in quote_words:
                    w,h = font.getsize(word+' ')
                    length += w
                    if length >= 1000:
                        break_lines.append(wordcount)
                        length = w-22
                    else:
                        pass
                    wordcount += 1

                if (len(break_lines) + 1) > 18:

                    print(f'Quote Nr. {quote_nr} is too long')
                    
                    quote_nr += 1

                    error_nr += 1

                else:

                    quote_full = ''
                    counter = 0

                    for word in quote_words:
                        counter += 1
                        if counter in break_lines:
                            quote_full = quote_full + word + '\n'
                        else:
                            quote_full = quote_full + word + ' '

                    w,h = font.getsize_multiline(quote_full)
                    draw = ImageDraw.Draw(canvas)
                    draw.text(((1080-w)/2,(1080-h)/2),quote_full,font=font,fill='black')

                    if quote_nr < 30:
                        canvas.show()
                    
                    canvas.save(f'./{filename}/{filename}_Quote_{quote_nr}.png')
            
                    quote_nr += 1

            else:

                quote_full = ''
                counter = 0

                for word in quote_words:
                    counter += 1
                    if counter in break_lines:
                        quote_full = quote_full + word + '\n'
                    else:
                        quote_full = quote_full + word + ' '

                w,h = font.getsize_multiline(quote_full)
                draw = ImageDraw.Draw(canvas)
                draw.text(((1080-w)/2,(1080-h)/2),quote_full,font=font,fill='black')

                if quote_nr < 30:
                    canvas.show()
                
                canvas.save(f'./{filename}/{filename}_Quote_{quote_nr}.png')
        
                quote_nr += 1

        else:

            quote_full = ''
            counter = 0

            for word in quote_words:
                counter += 1
                if counter in break_lines:
                    quote_full = quote_full + word + '\n'
                else:
                    quote_full = quote_full + word + ' '

            w,h = font.getsize_multiline(quote_full)
            draw = ImageDraw.Draw(canvas)
            draw.text(((1080-w)/2,(1080-h)/2),quote_full,font=font,fill='black')

            if quote_nr < 30:
                canvas.show()
            
            canvas.save(f'./{filename}/{filename}_Quote_{quote_nr}.png')
        
            quote_nr += 1

    else:

        quote_full = ''
        counter = 0

        for word in quote_words:
            counter += 1
            if counter in break_lines:
                quote_full = quote_full + word + '\n'
            else:
                quote_full = quote_full + word + ' '

        w,h = font.getsize_multiline(quote_full)
        draw = ImageDraw.Draw(canvas)
        draw.text(((1080-w)/2,(1080-h)/2),quote_full,font=font,fill='black')

        if quote_nr < 30:
            canvas.show()
        
        canvas.save(f'./{filename}/{filename}_Quote_{quote_nr}.png')
        
        quote_nr += 1

quotes_created = quote_nr - error_nr - 1

print(f'--------------------\nDone. {quotes_created} out of {quote_nr - 1} Quotes were created.')
